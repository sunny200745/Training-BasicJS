Web Storage

Persistent local storage is one of the areas where native client applications have held an advantage over web applications. Cookies were there before to maintain web's history, and indeed they were used for storing small amount of data.

Downside of this approach were:
- Cookies are included with every HTTP request, thereby slowing down your web application by needlessly transmitting the same data over and over
- Cookies are included with every HTTP request, thereby sending data unencrypted over the internet (unless your entire web application is served over SSL)
- Cookies are limited to about 4 KB of data â€” enough to slow down your application (see above), but not enough to be terribly useful

Evolution of web storage
- Microsoft introduced userData which could store 64kb of data per domain.
- In 2002 Adobe introduced the idea of Flash cookies known as Local Shared Object which could store data upto 100kb per domain. Later Flash-tojavascript prototype were introduced which allowed user to save data from 1-10mb but user had to pay for this.
- In 2007, Google launched Gears, an open source browser plugin aimed at providing additional capabilities in browsers. Gears provided an API to an embedded SQL database based on SQLite.

But all these solutions were browser specific.

Then came the HTML5 Local storage which was able to store key/value pairs locally withing client (browser)

Unlike cookies, this data is never transmitted to the remote web server (unless you go out of your way to send it manually). Unlike all previous attempts at providing persistent local storage, it is implemented natively in web browsers, so it is available even when third-party browser plugins are not.HTML5 STORAGE SUPPORT

SUPPORT:
IE	8.0+	
FIREFOX  3.5+
SAFARI  4.0+		
CHROME	4.0+
OPERA  10.5+
IPHONE 2.0+
ANDROID  2.0+
					

Check support for html5 local storage

function supports_html5_storage() {
  try {
    return 'localStorage' in window && window['localStorage'] !== null;
  } catch (e) {
    return false;
  }
}

Using HTML5 Storage

You store data based on a named key, then you can retrieve that data with the same key. The named key is a string. The data can be any type supported by JavaScript, including strings, Booleans, integers, or floats. However, the data is actually stored as a string. If you are storing and retrieving anything other than strings, you will need to use functions like parseInt() or parseFloat() to coerce your retrieved data into the expected JavaScript datatype.

Calling setItem() with a named key that already exists will silently overwrite the previous value. Calling getItem() with a non-existent key will return null rather than throw an exception.

localStorage.setItem("name", "Pinakin");

var data = localStorage.getItem("name");

console.log(data);

==> "Pinakin"

removeItem() is used to delete.

Plugging data leaks

object that are being saved using localStorage will persist until you clear the local storage. however with the sessionStorage, data get deleted as soon as you close the browser or open a new tab.
